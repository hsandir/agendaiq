/**
 * Safe Agent System - Kullanƒ±m √ñrnekleri
 * Bu dosya g√ºvenli agent sisteminin nasƒ±l kullanƒ±lacaƒüƒ±nƒ± g√∂sterir
 */

import { SafeAgentSystem, safeAgentWrapper } from './safe-agent-system';
import { SafeLintEnforcer, safeTypescriptLintFix, batchSafeLintFix } from './safe-lint-enforcer';
import fs from 'fs/promises';

/**
 * √ñrnek 1: Tek dosya √ºzerinde g√ºvenli i≈ülem
 */
async function exampleSingleFileOperation() {
  const safeSystem = new SafeAgentSystem();
  const filePath = './src/example.ts';

  const result = await safeSystem.safeFileOperation(
    filePath,
    async () => {
      // Burada dosya √ºzerinde deƒüi≈üiklik yapƒ±lƒ±r
      const content = await fs.readFile(filePath, 'utf-8');
      const modifiedContent = content.replace(/var /g, 'const ');
      await fs.writeFile(filePath, modifiedContent, 'utf-8');
    },
    {
      maxSyntaxErrors: 0,  // Hi√ß syntax hatasƒ± kabul etme
      maxBuildErrors: 0    // Hi√ß build hatasƒ± kabul etme
    }
  );

  if (result.success) {
    console.log('‚úÖ Operation successful!');
  } else {
    console.log('‚ùå Operation failed, file restored:', result.validationResult.errors);
  }

  await safeSystem.cleanup();
}

/**
 * √ñrnek 2: Lint enforcer ile g√ºvenli d√ºzeltme
 */
async function exampleLintEnforcement() {
  const filesToFix = [
    './src/app/api/auth/signup/route.ts',
    './src/app/api/dev/ci-cd/runs/route.ts'
  ];

  const result = await batchSafeLintFix(filesToFix);

  if (result.success && result.result) {
    console.log(`‚úÖ Successfully fixed ${result.result.fixedFiles.length} files`);
    console.log(`‚ùå Failed to fix ${result.result.failedFiles.length} files`);
  } else {
    console.log('‚ùå Batch fix failed:', result.failures);
  }
}

/**
 * √ñrnek 3: Custom agent wrapper
 */
async function exampleCustomAgent() {
  const filePaths = ['./src/example1.ts', './src/example2.ts'];

  const result = await safeAgentWrapper(
    async () => {
      // Custom agent logic buraya
      for (const filePath of filePaths) {
        const content = await fs.readFile(filePath, 'utf-8');
        
        // √ñrnek: console.log'larƒ± kaldƒ±r
        const cleanContent = content.replace(/console\.log\([^)]*\);?\n?/g, '');
        
        await fs.writeFile(filePath, cleanContent, 'utf-8');
      }
      
      return { processedFiles: filePaths.length };
    },
    filePaths,
    {
      maxSyntaxErrors: 0,
      maxBuildErrors: 1, // Bir tane build hatasƒ± tolere et
      description: 'Remove console.log statements'
    }
  );

  console.log('Custom agent result:', result);
}

/**
 * √ñrnek 4: Hata durumu sim√ºlasyonu
 */
async function exampleErrorHandling() {
  const safeSystem = new SafeAgentSystem();
  const filePath = './src/test-error.ts';

  try {
    const result = await safeSystem.safeFileOperation(
      filePath,
      async () => {
        // Kasƒ±tlƒ± olarak bozuk kod yaz
        const brokenCode = `
          function test() {
            return "test";  // syntax hatasƒ± yaratacak deƒüi≈üiklik
          ;  // <- bu hata yaratƒ±r
        `;
        await fs.writeFile(filePath, brokenCode, 'utf-8');
      }
    );

    if (!result.success) {
      console.log('‚úÖ Error handling worked! File was restored automatically.');
      console.log('Validation errors:', result.validationResult.errors);
    }
  } catch (error) {
    console.log('‚úÖ Exception handling worked! File was restored.');
  } finally {
    await safeSystem.cleanup();
  }
}

/**
 * √ñrnek 5: Threshold ayarlarƒ± ile esnek kontrol
 */
async function exampleThresholdControl() {
  const safeSystem = new SafeAgentSystem();
  const filePath = './src/flexible-example.ts';

  // Esnek threshold - birka√ß warning'e izin ver
  const result = await safeSystem.safeFileOperation(
    filePath,
    async () => {
      // Bazƒ± style sorunlarƒ± olan ama √ßalƒ±≈üan kod
      const codeWithWarnings = `
        function example() {
          let unused_variable = "test";  // ESLint warning
          return "working code";
        }
      `;
      await fs.writeFile(filePath, codeWithWarnings, 'utf-8');
    },
    {
      maxSyntaxErrors: 0,     // Syntax hatasƒ± yok
      maxBuildErrors: 0       // Build hatasƒ± yok
    }
  );

  console.log('Flexible operation result:', result.success);
  await safeSystem.cleanup();
}

/**
 * Ana test function
 */
export async function runSafeAgentExamples() {
  console.log('üöÄ Running Safe Agent System Examples...\n');

  try {
    console.log('1Ô∏è‚É£ Single File Operation Example:');
    await exampleSingleFileOperation();

    console.log('\n2Ô∏è‚É£ Lint Enforcement Example:');
    await exampleLintEnforcement();

    console.log('\n3Ô∏è‚É£ Custom Agent Example:');
    await exampleCustomAgent();

    console.log('\n4Ô∏è‚É£ Error Handling Example:');
    await exampleErrorHandling();

    console.log('\n5Ô∏è‚É£ Threshold Control Example:');
    await exampleThresholdControl();

    console.log('\n‚úÖ All examples completed successfully!');
  } catch (error) {
    console.error('‚ùå Example execution failed:', error);
  }
}

// CLI usage
if (require.main === module) {
  runSafeAgentExamples();
}