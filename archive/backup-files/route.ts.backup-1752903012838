import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth/auth-options';
import * as fs from 'fs';
import * as path from 'path';

interface LogEntry {
  id: string;
  timestamp: string;
  level: 'info' | 'warn' | 'error' | 'debug';
  source: string;
  message: string;
  details?: string;
}

interface LogsData {
  entries: LogEntry[];
  totalCount: number;
  levels: {
    info: number;
    warn: number;
    error: number;
    debug: number;
  };
  sources: string[];
  lastUpdated: string;
}

export async function GET() {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    console.log('Fetching system logs...');

    // Simulate real log entries - in production, this would read from actual log files
    const logEntries: LogEntry[] = [
      {
        id: '1',
        timestamp: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago
        level: 'info',
        source: 'NextJS',
        message: 'Application started successfully',
        details: 'Server listening on port 3000'
      },
      {
        id: '2',
        timestamp: new Date(Date.now() - 1000 * 60 * 10).toISOString(), // 10 minutes ago
        level: 'warn',
        source: 'Database',
        message: 'Connection pool approaching limit',
        details: 'Active connections: 85/100'
      },
      {
        id: '3',
        timestamp: new Date(Date.now() - 1000 * 60 * 15).toISOString(), // 15 minutes ago
        level: 'error',
        source: 'API',
        message: 'Failed to fetch user profile',
        details: 'PrismaClientValidationError: Unknown field `staff` for include statement'
      },
      {
        id: '4',
        timestamp: new Date(Date.now() - 1000 * 60 * 20).toISOString(), // 20 minutes ago
        level: 'info',
        source: 'Mock Data Scanner',
        message: 'Codebase scan completed',
        details: 'Found 11 files with mock data usage'
      },
      {
        id: '5',
        timestamp: new Date(Date.now() - 1000 * 60 * 25).toISOString(), // 25 minutes ago
        level: 'debug',
        source: 'System',
        message: 'Package analysis started',
        details: 'Using fast package analysis instead of slow npm outdated'
      },
      {
        id: '6',
        timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
        level: 'info',
        source: 'Database',
        message: 'Database metrics updated',
        details: 'Connected to PostgreSQL database successfully'
      },
      {
        id: '7',
        timestamp: new Date(Date.now() - 1000 * 60 * 35).toISOString(), // 35 minutes ago
        level: 'warn',
        source: 'API',
        message: 'Rate limit approaching for endpoint',
        details: '/api/system/status - 45/50 requests per minute'
      },
      {
        id: '8',
        timestamp: new Date(Date.now() - 1000 * 60 * 40).toISOString(), // 40 minutes ago
        level: 'info',
        source: 'Build',
        message: 'Hot reload completed',
        details: 'Compiled /dashboard/system/mock-data-tracker in 1169ms'
      },
      {
        id: '9',
        timestamp: new Date(Date.now() - 1000 * 60 * 45).toISOString(), // 45 minutes ago
        level: 'error',
        source: 'File System',
        message: 'Permission denied accessing log directory',
        details: '/var/log/agendaiq/ - insufficient permissions'
      },
      {
        id: '10',
        timestamp: new Date(Date.now() - 1000 * 60 * 50).toISOString(), // 50 minutes ago
        level: 'info',
        source: 'Auth',
        message: 'User authentication successful',
        details: 'User admin@school.edu logged in successfully'
      }
    ];

    // Add recent real-time entries based on current system activity
    const recentEntries: LogEntry[] = [
      {
        id: `rt-${Date.now()}`,
        timestamp: new Date().toISOString(),
        level: 'info',
        source: 'System Logs API',
        message: 'Log data requested',
        details: `Requested by ${session.user.email}`
      }
    ];

    const allEntries = [...recentEntries, ...logEntries];

    // Calculate statistics
    const levels = {
      info: allEntries.filter(e => e.level === 'info').length,
      warn: allEntries.filter(e => e.level === 'warn').length,
      error: allEntries.filter(e => e.level === 'error').length,
      debug: allEntries.filter(e => e.level === 'debug').length
    };

    const sources = [...new Set(allEntries.map(e => e.source))];

    const logsData: LogsData = {
      entries: allEntries.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()),
      totalCount: allEntries.length,
      levels,
      sources,
      lastUpdated: new Date().toISOString()
    };

    console.log(`System logs fetched: ${logsData.totalCount} entries`);
    
    return NextResponse.json(logsData);
  } catch (error) {
    console.error('Error fetching system logs:', error);
    return NextResponse.json(
      { error: 'Failed to fetch system logs', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
} 