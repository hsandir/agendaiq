import { getServerSession } from 'next-auth/next';
import { authOptions } from './auth-options';
import { prisma } from '@/lib/prisma';
import { redirect } from 'next/navigation';

// Types for better type safety
export interface AuthenticatedUser {
  id: number;
  email: string;
  name: string | null;
  staff?: {
    id: number;
    role: {
      id: number;
      title: string;
      priority: number;
      category: string | null;
      is_leadership: boolean;
    };
    department: {
      id: number;
      name: string;
      code: string;
    };
    school: {
      id: number;
      name: string;
      code: string | null;
    };
    district: {
      id: number;
      name: string;
      code: string | null;
    };
  } | null;
}

export interface AuthRequirements {
  requireAuth?: boolean;
  requireStaff?: boolean;
  requireAdminRole?: boolean;
  requireLeadership?: boolean;
  allowedRoles?: string[];
  allowedDepartments?: string[];
  allowedSchools?: string[];
}

export interface AuthResult {
  authorized: boolean;
  user?: AuthenticatedUser;
  error?: string;
  statusCode?: number;
}

/**
 * Get current user from session
 */
export async function getCurrentUser(): Promise<AuthenticatedUser | null> {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return null;
    }

    const user = await prisma.user.findUnique({
      where: { id: session.user.id },
      include: {
        Staff: {
          include: {
            Role: true,
            Department: true,
            School: {
              include: {
                District: true
              }
            }
          }
        }
      }
    });

    if (!user) return null;

    const staff = user.Staff[0];
    return {
      id: user.id,
      email: user.email,
      name: user.name,
      staff: staff ? {
        id: staff.id,
        role: {
          id: staff.Role.id,
          title: staff.Role.title,
          priority: staff.Role.priority,
          category: staff.Role.category,
          is_leadership: staff.Role.is_leadership
        },
        department: {
          id: staff.Department.id,
          name: staff.Department.name,
          code: staff.Department.code
        },
        school: {
          id: staff.School.id,
          name: staff.School.name,
          code: staff.School.code
        },
        district: {
          id: staff.School.District.id,
          name: staff.School.District.name,
          code: staff.School.District.code
        }
      } : null
    };
  } catch (error) {
    console.error('getCurrentUser error:', error);
    return null;
  }
}

/**
 * Check if user has specific role
 */
export function hasRole(user: AuthenticatedUser | null, role: string): boolean {
  return user?.staff?.role?.title === role;
}

/**
 * Check if user is admin
 */
export function isAdmin(user: AuthenticatedUser | null): boolean {
  return hasRole(user, 'Administrator');
}

/**
 * Check if user is leadership
 */
export function isLeadership(user: AuthenticatedUser | null): boolean {
  return user?.staff?.role?.is_leadership === true;
}

/**
 * Check authentication requirements
 */
export async function checkAuthRequirements(
  requirements: AuthRequirements = {}
): Promise<AuthResult> {
  
  // If no auth required, allow access
  if (!requirements.requireAuth) {
    return { authorized: true };
  }

  const user = await getCurrentUser();
  
  if (!user) {
    return {
      authorized: false,
      error: 'Authentication required',
      statusCode: 401
    };
  }

  // Check staff requirement
  if (requirements.requireStaff && !user.staff) {
    return {
      authorized: false,
      user,
      error: 'Staff membership required',
      statusCode: 403
    };
  }

  // Check admin role requirement
  if (requirements.requireAdminRole && !isAdmin(user)) {
    return {
      authorized: false,
      user,
      error: 'Administrator role required',
      statusCode: 403
    };
  }

  // Check leadership requirement
  if (requirements.requireLeadership && !isLeadership(user)) {
    return {
      authorized: false,
      user,
      error: 'Leadership role required',
      statusCode: 403
    };
  }

  // Check allowed roles
  if (requirements.allowedRoles?.length && user.staff) {
    const userRole = user.staff.role.title;
    if (!requirements.allowedRoles.includes(userRole)) {
      return {
        authorized: false,
        user,
        error: `Role '${userRole}' not allowed. Allowed roles: ${requirements.allowedRoles.join(', ')}`,
        statusCode: 403
      };
    }
  }

  return { authorized: true, user };
}

/**
 * Predefined auth presets
 */
export const AuthPresets = {
  requireUser: { requireAuth: true },
  requireStaff: { requireAuth: true, requireStaff: true },
  adminOnly: { requireAuth: true, requireStaff: true, requireAdminRole: true },
  leadershipOnly: { requireAuth: true, requireStaff: true, requireLeadership: true },
  highPriority: { requireAuth: true, requireStaff: true, allowedRoles: ['Administrator', 'Principal', 'Superintendent'] },
  managementOnly: { requireAuth: true, requireStaff: true, allowedRoles: ['Principal', 'Superintendent', 'Administrator'] }
} as const;

/**
 * Ensure user meets requirements or redirect/throw error
 */
export async function requireAuth(
  requirements: AuthRequirements = {},
  redirectPath = '/auth/signin'
): Promise<AuthenticatedUser> {
  
  const result = await checkAuthRequirements(requirements);
  
  if (!result.authorized) {
    if (!result.user) {
      // No user - redirect to signin
      redirect(redirectPath);
    } else {
      // User exists but doesn't meet requirements - throw error
      throw new Error(result.error || 'Access denied');
    }
  }

  return result.user!;
} 