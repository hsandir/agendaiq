name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
      - 'feature/**'
      - 'release/**'
  pull_request:
    branches: 
      - main
      - develop
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '20'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # 1. Code Quality Checks
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check code formatting
        run: npm run format:check
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Type checking
        run: |
          npx prisma generate
          npm run type-check
      
      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # 2. Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # 3. Test Suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: agendaiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        run: |
          npx prisma generate
          npx prisma db push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/agendaiq_test
          DIRECT_URL: postgresql://test:test@localhost:5432/agendaiq_test
      
      - name: Install Playwright (E2E only)
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps
      
      - name: Build application (E2E only)
        if: matrix.test-type == 'e2e'
        run: npm run build
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/agendaiq_test
          DIRECT_URL: postgresql://test:test@localhost:5432/agendaiq_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
      
      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/agendaiq_test
          DIRECT_URL: postgresql://test:test@localhost:5432/agendaiq_test
          NEXTAUTH_URL: http://localhost:3000
          NEXTAUTH_SECRET: test-secret
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-results
          path: |
            coverage/
            playwright-report/
            test-results/

  # 4. Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [quality-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Generate Prisma client
        run: npx prisma generate
      
      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      
      - name: Analyze bundle size
        run: |
          echo "Bundle size analysis:"
          du -sh .next/
          find .next -name "*.js" -size +500k -exec ls -lh {} \;
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 7

  # 5. Deploy to Vercel (Preview)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-args: '--preview'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ Preview deployed to: ${{ steps.vercel-deploy.outputs.preview-url }}`
            })

  # 6. Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: vercel-deploy-prod
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ env.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run smoke tests on production
        run: |
          sleep 30  # Wait for deployment to be live
          curl -f https://agendaiq.vercel.app || exit 1
          curl -f https://agendaiq.vercel.app/auth/signin || exit 1
      
      - name: Notify deployment success
        run: echo "‚úÖ Deployed to production successfully!"

  # 7. Database Migration (Production)
  migrate-database:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      
      - name: Verify database health
        run: npx prisma db pull
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  # 8. Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-preview]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.preview-url }}
            ${{ needs.deploy-preview.outputs.preview-url }}/auth/signin
            ${{ needs.deploy-preview.outputs.preview-url }}/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 9. Rollback on Failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger rollback
        run: |
          echo "üîÑ Triggering rollback to previous deployment..."
          # Add rollback logic here (Vercel API call)
      
      - name: Notify team
        run: |
          echo "‚ö†Ô∏è Production deployment failed! Rolled back to previous version."
          # Add notification logic (Slack, email, etc.)

  # 10. Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
      - name: Clean up test artifacts
        run: echo "Cleaning up test artifacts..."
      
      - name: Prune old deployments
        run: echo "Pruning old Vercel deployments..."