name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '20.x'

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment conditions
        id: check
        run: |
          # Check if all required secrets are set
          if [[ -z "${{ secrets.DEPLOY_HOST }}" || -z "${{ secrets.DEPLOY_KEY }}" ]]; then
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "::error::Required deployment secrets are not configured"
            exit 1
          fi
          echo "should-deploy=true" >> $GITHUB_OUTPUT

  # Build and prepare for deployment
  build:
    name: Build for Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy]
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Run tests
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        run: npm test -- --passWithNoTests

      - name: Build application
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
        run: |
          npm run build
          npm prune --production

      - name: Create deployment package
        run: |
          tar -czf deploy-package.tar.gz \
            .next \
            public \
            package*.json \
            next.config.js \
            prisma \
            scripts

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: deploy-package
          path: deploy-package.tar.gz
          retention-days: 7

  # Database migrations
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Prisma CLI
        run: npm install -g prisma

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          prisma migrate deploy
          prisma generate

  # Deploy to server
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [build, migrate]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deploy-package

      - name: Deploy to server
        id: deploy
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # Setup SSH key
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add host to known_hosts
          ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
          
          # Copy deployment package to server
          scp -i ~/.ssh/deploy_key deploy-package.tar.gz $DEPLOY_USER@$DEPLOY_HOST:/tmp/
          
          # Deploy on server
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
            cd ${{ env.DEPLOY_PATH }}
            
            # Backup current deployment
            if [ -d ".next" ]; then
              tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz .next public
            fi
            
            # Extract new deployment
            tar -xzf /tmp/deploy-package.tar.gz
            
            # Install production dependencies
            npm ci --production
            
            # Restart application
            pm2 restart agendaiq || pm2 start npm --name agendaiq -- start
            
            # Clean up
            rm /tmp/deploy-package.tar.gz
            
            # Keep only last 5 backups
            ls -t backup-*.tar.gz | tail -n +6 | xargs rm -f
          ENDSSH
          
          echo "url=https://${{ secrets.PRODUCTION_URL }}" >> $GITHUB_OUTPUT

  # Post-deployment checks
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [deploy]
    steps:
      - name: Check application health
        run: |
          sleep 30  # Wait for application to start
          
          # Check if application is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PRODUCTION_URL }}/api/health)
          
          if [ "$response" != "200" ]; then
            echo "::error::Health check failed with status $response"
            exit 1
          fi
          
          echo "✅ Application is healthy"

      - name: Run smoke tests
        run: |
          # Basic smoke tests
          curl -f https://${{ secrets.PRODUCTION_URL }}
          curl -f https://${{ secrets.PRODUCTION_URL }}/api/health
          
          echo "✅ Smoke tests passed"

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [verify]
    if: failure()
    steps:
      - name: Rollback to previous version
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          mkdir -p ~/.ssh
          echo "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          ssh -i ~/.ssh/deploy_key $DEPLOY_USER@$DEPLOY_HOST << 'ENDSSH'
            cd ${{ env.DEPLOY_PATH }}
            
            # Find latest backup
            latest_backup=$(ls -t backup-*.tar.gz | head -1)
            
            if [ -n "$latest_backup" ]; then
              echo "Rolling back to $latest_backup"
              tar -xzf "$latest_backup"
              pm2 restart agendaiq
              echo "✅ Rollback completed"
            else
              echo "❌ No backup found for rollback"
              exit 1
            fi
          ENDSSH

      - name: Notify rollback
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production deployment rolled back',
              body: `The deployment to production has been automatically rolled back due to health check failures.
              
              **Commit:** ${context.sha}
              **Actor:** ${context.actor}
              **Workflow:** ${context.workflow}
              
              Please investigate the issue before attempting another deployment.`,
              labels: ['deployment', 'incident']
            })