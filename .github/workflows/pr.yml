name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/agendaiq_test

jobs:
  label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let label = '';
            if (total < 50) label = 'size/xs';
            else if (total < 200) label = 'size/s';
            else if (total < 500) label = 'size/m';
            else if (total < 1000) label = 'size/l';
            else label = 'size/xl';
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [label]
            });
            
            if (total > 1000) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è This PR contains ' + total + ' changes. Consider breaking it into smaller PRs for easier review.'
              });
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  code-review:
    name: Automated Code Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for console.log statements
        run: |
          if grep -r "console.log" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next src/; then
            echo "‚ùå Found console.log statements in production code"
            exit 1
          fi
        continue-on-error: true

      - name: Check for TODO comments
        run: |
          todos=$(grep -r "TODO\|FIXME\|HACK" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.next src/ || true)
          if [ ! -z "$todos" ]; then
            echo "üìù Found TODO/FIXME/HACK comments:"
            echo "$todos"
          fi

      - name: Run ESLint
        run: npm run lint -- --format json --output-file eslint-report.json
        continue-on-error: true

      - name: Comment ESLint results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const report = JSON.parse(fs.readFileSync('eslint-report.json', 'utf8'));
              let errorCount = 0;
              let warningCount = 0;
              
              report.forEach(file => {
                errorCount += file.errorCount;
                warningCount += file.warningCount;
              });
              
              if (errorCount > 0 || warningCount > 0) {
                const body = `## ESLint Report
                
                - ‚ùå Errors: ${errorCount}
                - ‚ö†Ô∏è Warnings: ${warningCount}
                
                Please fix the errors before merging.`;
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
              }
            } catch (e) {
              console.log('No ESLint issues found');
            }

  test-coverage:
    name: Test Coverage Check
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: agendaiq_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma db push

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: |
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          threshold=80
          
          if (( $(echo "$coverage < $threshold" | bc -l) )); then
            echo "‚ùå Coverage ${coverage}% is below threshold ${threshold}%"
            exit 1
          else
            echo "‚úÖ Coverage ${coverage}% meets threshold ${threshold}%"
          fi

      - name: Comment coverage report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
            
            const body = `## Test Coverage Report
            
            | Metric | Coverage |
            |--------|----------|
            | Lines | ${coverage.total.lines.pct}% |
            | Statements | ${coverage.total.statements.pct}% |
            | Functions | ${coverage.total.functions.pct}% |
            | Branches | ${coverage.total.branches.pct}% |
            
            Minimum threshold: 80%`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  preview-deploy:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-comment: false

      - name: Extract preview URL
        id: extract_url
        run: |
          echo "preview_url=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_OUTPUT

  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: preview-deploy
    if: needs.preview-deploy.outputs.preview_url != ''
    steps:
      - uses: actions/checkout@v4

      - name: Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.preview-deploy.outputs.preview_url }}
            ${{ needs.preview-deploy.outputs.preview_url }}/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Comment Lighthouse results
        uses: actions/github-script@v7
        with:
          script: |
            const results = require('./lighthouse-results.json');
            const scores = results[0].categories;
            
            const body = `## Lighthouse Performance Report
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${scores.performance.score * 100}% |
            | Accessibility | ${scores.accessibility.score * 100}% |
            | Best Practices | ${scores['best-practices'].score * 100}% |
            | SEO | ${scores.seo.score * 100}% |
            
            Preview URL: ${{ needs.preview-deploy.outputs.preview_url }}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  merge-check:
    name: Merge Readiness Check
    runs-on: ubuntu-latest
    needs: [code-review, test-coverage, preview-deploy]
    if: always()
    steps:
      - name: Check merge readiness
        uses: actions/github-script@v7
        with:
          script: |
            const checks = [
              { name: 'Code Review', status: '${{ needs.code-review.result }}' },
              { name: 'Test Coverage', status: '${{ needs.test-coverage.result }}' },
              { name: 'Preview Deploy', status: '${{ needs.preview-deploy.result }}' }
            ];
            
            const failed = checks.filter(c => c.status === 'failure');
            const passed = checks.filter(c => c.status === 'success');
            
            let emoji = '‚úÖ';
            let status = 'ready to merge';
            
            if (failed.length > 0) {
              emoji = '‚ùå';
              status = 'not ready to merge';
            }
            
            const body = `## ${emoji} PR Status: ${status}
            
            | Check | Status |
            |-------|--------|
            ${checks.map(c => `| ${c.name} | ${c.status === 'success' ? '‚úÖ' : '‚ùå'} ${c.status} |`).join('\n')}
            
            ${failed.length > 0 ? '**Please fix the failing checks before merging.**' : '**All checks passed! Ready to merge.**'}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });